version: 2.1

commands:
  destroy-environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              aws cloudformation delete-stack --stack-name udapeople-frontend-eldaly1997
              aws cloudformation delete-stack --stack-name udapeople-backend-eldaly1997

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: eldaly1997
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
                cd ~/project/backend
                npm install
                Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

docker_image1: &node_image
  docker:
      - image: circleci/node:13.8.0
docker_image2: &aws-node_image
  docker:
      - image: mareimorsy/aws-node
docker_image3: &aws_image
  docker:
      - image: amazon/aws-cli
docker_image4: &ansible_image
  docker:
      - image: python:3.7-alpine3.16

jobs:
  build-frontend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run build
                
  test-backend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Backend test
          command: |
            cd backend
            npm install
            npm run build

  fixing-critical-vulnerabilities:
    <<: *node_image
    steps:
      - run:
          name: fixing critical vulnerabilities
          command: |
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-frontend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend scan
          command: |
            cd frontend
            npm install
            npm run build

  scan-backend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Backend scan
          command: |
            cd backend
            npm install
            npm run build

  deploy-infrastructure:
    <<: *aws_image
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-eldaly1997" \
              --parameter-overrides ID="eldaly1997"
              exit_code=$?
              if [[ $exit_code == 0  ||  $exit_code == 255 ]]; 
                then
                    exit 0
                else
                    exit 1
                fi
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-eldaly1997" \
              --parameter-overrides ID="eldaly1997"
              exit_code=$?
              if [[ $exit_code == 0  ||  $exit_code == 255 ]]; 
                then
                    exit 0
                else
                    exit 1
                fi
      - run:
          name: install tar & gzip utility
          command: yum install -y tar gzip
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances \
            --filters Name=tag:Name,Values="backend-eldaly1997" \
            --query  'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # - destroy-environment

  configure-infrastructure:
      <<: *ansible_image
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["96:9f:69:bf:88:57:05:8e:52:1a:07:e4:4a:f7:9f:f5"]
        - attach_workspace:
            at: ~/
        - run:
            name: Install Dependencies
            command: |
              apk add ansible gzip openssh-client
        - run:
            name: Configure server
            command: |
              cd .circleci/ansible
              ansible-playbook -i inventory.txt configure-server.yml

  run-migrations:
      <<: *ansible_image
      steps:
        - checkout
        - run:
            name: Install Dependencies
            command: |
              apk add --update --no-cache tar gzip nodejs npm aws-cli curl
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Run migrations
            command: |
              cd backend
              npm install
              npm run build
              npm run migrations >> migrations_dump.txt
        - run:
            name: Send migration results to kvdb
            command: |
                if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                then
                    # If you are using kvdb.io, generate the bucket ID "38jXFhxqqptSJwGCouw15G" in your local terminal first
                    curl -d '1' https://kvdb.io/38jXFhxqqptSJwGCouw15G/migration_eldaly1997
                fi
        # - destroy-environment 

  deploy-frontend:
    <<: *aws-node_image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-eldaly1997" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"eldaly1997".tar.gz dist
            aws s3 cp dist s3://udapeople-eldaly1997 --recursive
      # - destroy-environment
      # - revert-migrations      
                    
  deploy-backend:
    <<: *ansible_image
    steps:
      - checkout
      - add_ssh_keys:
            fingerprints: ["96:9f:69:bf:88:57:05:8e:52:1a:07:e4:4a:f7:9f:f5"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-deps]
      - run:
            name: Install Dependencies
            command: |
              apk add --update --no-cache tar gzip nodejs npm aws-cli curl
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # - destroy-environment
      # - revert-migrations 

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]