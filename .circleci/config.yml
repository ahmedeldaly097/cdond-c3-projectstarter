version: 2.1

# destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       workflow_id:
#         type: string
#         default: "${CIRCLE_WORKFLOW_ID}"
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             aws cloudformation delete-stack --stack-name UdaPeople-backend-${workflow_id:0:5}
#             aws cloudformation delete-stack --stack-name UdaPeople-frontend-${workflow_id:0:5}
#             aws s3 rb s3://UdaPeople-${workflow_id:0:5} --force

# revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       workflow_id:
#         type: string
#         default: "${workflow_id}"
#     steps:
#       - run:
#           name: Revert migrations
#           command: |
#             SUCCESS=$(curl --insecure https://kvdb.io/LenSAeevv3RGZnFLitxUTC/migration_${workflow_id:0:5})
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#               cd ~/project/backend
#               npm install
#               npm run migrations:revert
#             fi

docker_image1: &node_image
  docker:
      - image: circleci/node:13.8.0

docker_image2: &aws_image
  docker:
      - image: amazon/aws-cli

jobs:
  build-frontend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run build
                
  test-backend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Backend test
          command: |
            cd backend
            npm install
            npm run build

  fixing-critical-vulnerabilities:
    <<: *node_image
    steps:
      - run:
          name: fixing critical vulnerabilities
          command: |
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-frontend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend scan
          command: |
            cd frontend
            npm install
            npm run build

  scan-backend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Backend scan
          command: |
            cd backend
            npm install
            npm run build

  deploy-infrastructure:
    <<: *aws_image
    steps:
      - checkout
      - run:
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> ansible/invetory.txt
      - persist_to_workspace:
          root: ansible
          paths:
            - inventory.txt
      # - destroy-environment


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]